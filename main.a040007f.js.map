{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","state","copyState","score","status","addRandomTile","move","checkGameState","direction","originalState","combineRow","row","newRow","filter","n","i","length","moveStateLeft","map","moveRowLeft","push","moveStateRight","moveRowRight","copyRow","JSON","parse","stringify","reverse","transposeState","areStatesEqual","emptyCells","col","Math","floor","random","hasEmptyCells","canCombine","current","state1","state2","result","module","exports","require","startButton","document","querySelector","cells","querySelectorAll","gameOverText","game","updateUI","index","getState","cell","className","textContent","classList","add","getScore","statusGame","getStatus","remove","showGameOverMessage","style","backgroundColor","addEventListener","handleClick","removeEventListener","e","key","moveLeft","moveRight","moveUp","moveDown","restart","start"],"mappings":"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","file":"main.a040007f.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = this.copyState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  restart() {\n    this.state = this.copyState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moved = this.move('left');\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moved = this.move('right');\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moved = this.move('up');\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moved = this.move('down');\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  move(direction) {\n    const originalState = this.copyState(this.state);\n\n    const combineRow = (row) => {\n      const newRow = row.filter((n) => n !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          newRow[i + 1] = 0;\n          this.score += newRow[i];\n        }\n      }\n\n      return newRow.filter((n) => n !== 0);\n    };\n\n    const moveRowLeft = (row) => {\n      const newRow = combineRow(row);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      return newRow;\n    };\n\n    const moveRowRight = (row) => {\n      const copyRow = JSON.parse(JSON.stringify(row));\n      const newRow = combineRow(copyRow.reverse());\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      return newRow.reverse();\n    };\n\n    const moveStateLeft = (state) => {\n      return state.map((row) => moveRowLeft(row));\n    };\n\n    const moveStateRight = (state) => {\n      return state.map((row) => moveRowRight(row));\n    };\n\n    switch (direction) {\n      case 'left':\n        this.state = moveStateLeft(this.state);\n        break;\n      case 'right':\n        this.state = moveStateRight(this.state);\n        break;\n      case 'up':\n        this.state = this.transposeState(\n          moveStateLeft(this.transposeState(this.state)),\n        );\n        break;\n      case 'down':\n        this.state = this.transposeState(\n          moveStateRight(this.transposeState(this.state)),\n        );\n        break;\n    }\n\n    return !this.areStatesEqual(this.state, originalState);\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, col] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkGameState() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = 'win';\n\n          return;\n        }\n      }\n    }\n\n    if (this.hasEmptyCells() || this.canCombine()) {\n      return;\n    }\n\n    this.status = 'lose';\n  }\n\n  hasEmptyCells() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canCombine() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.state[row][col];\n\n        if (col < 3 && current === this.state[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && current === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  copyState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (state1[row][col] !== state2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  transposeState(state) {\n    const result = [];\n\n    for (let col = 0; col < 4; col++) {\n      result[col] = [];\n\n      for (let row = 0; row < 4; row++) {\n        result[col].push(state[row][col]);\n      }\n    }\n\n    return result;\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst startButton = document.querySelector('.button.start');\nconst cells = document.querySelectorAll('.field-cell');\nconst gameOverText = document.querySelector('.game-over-text');\nconst game = new Game();\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n    updateUI();\n  }\n});\n\nfunction updateUI() {\n  let index = 0;\n  const state = game.getState();\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const cell = cells[index];\n\n      cell.className = 'field-cell';\n\n      if (state[row][col]) {\n        cell.textContent = state[row][col];\n        cell.classList.add(`field-cell--${state[row][col]}`);\n      } else {\n        cell.textContent = '';\n      }\n      index++;\n    }\n  }\n\n  document.querySelector('.game-score').textContent = game.getScore();\n\n  const statusGame = game.getStatus();\n\n  if (statusGame === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (statusGame === 'lose') {\n    showGameOverMessage();\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.className === 'button restart') {\n    game.restart();\n    document.querySelector('.message-lose').classList.add('hidden');\n  }\n\n  game.start();\n  updateUI();\n  document.querySelector('.message-start').classList.add('hidden');\n  startButton.textContent = 'Restart';\n  startButton.className = 'button restart';\n});\n\nfunction showGameOverMessage() {\n  gameOverText.style.backgroundColor = 'rgba(112, 104, 95, 0.5)';\n  gameOverText.textContent = 'Game Over';\n\n  function handleClick() {\n    gameOverText.style.backgroundColor = '';\n    gameOverText.textContent = '';\n    document.removeEventListener('click', handleClick);\n  }\n  document.addEventListener('click', handleClick);\n}\n"]}